n
nn
n
mn
n
m
n
m
n
mn
n
q
n
nn
n
q
n
q
1
n
q
board.last_piece_moved.color
board.last_piece_moved
n
position
self[position.first, position.last].class
last_piece_moved
s
board.en_passant_move(start_position) == end_position
starting_piece.class == Pawn
end_position
start_position
starting_piece.color
starting_piece.position
starting_piece
s
n
starting_piece.color
starting_piece
s
n
s
n
q
list=
board_copy
self.last_piece_moved
self
board
self[position.first, position.last].class
last_piece_moved
s
n
s
self.en_passant_attack
self.side_attacks
self.forward_steps
self.position
self
s
moves
n
s
self[start_pos.first, start_pos.last].valid_moves
self[start_pos.first, start_pos.last].position
self[start_pos.first, start_pos.last].color
self[start_pos.first, start_pos.last]
s
n
s
n
list=
liat=
display.render
board[3,4].moves
board_copy[3,4].moves
board_copy[3,4].color
board_copy[3,4]
n
s
n
board[3,4].moves
n
q
n
q
n
board.move_piece(start_position, end_position)
illegal_move
n
list=
display.render
n
board[3,4].moves
n
display.render
board[3,4].moves
board[3,4].color
board[3,4]
board
n
q
n
board.move_piece(start_position, end_position)
illegal_move
n
illegal_move
n
q
n
board.move_piece(start_position, end_position)
board
board.move_piece(start_position, end_position)
illegal_move
n
q
board.move_piece(start_position, end_position) 
illegal_move
n
q
n
q
illegal_move
n
q
y
n
q
 board.move_piece(start_position, end_position) 
n
board[3,4].moves
n
board[3,4].moves
n
board[3,4].moves
n
list=
display.render
board[3,4].moves
board[3,4].color
q.color
board[3,4]
q
board_copy[2,3]
board_copy[2,3].moves
board_copy[3,4].moves
board[3,4].moves
board[3,4]
board[2,3]
list=
board[2,3]
display.render
list=
board
illegal_move
potential_captured_piece
n
opponent_at_end_position
n
s
n
display.render
n
illegal_move
n
illegal_move
n
illegal_move
n
q
display.render
illegal_move
display.render
board.move_piece(start_position, end_position)
illegal_move
n
display.render
n
display.render
n
list=
board[3,4].moves
board[3,4].color
board[3,4]
display.render
list=
self
n
q
self.rows
self.rows[2][0]
self
g
board
@rows[row][col]
value
col
row
q
forward_steps + [board.en_passant_move(position)]
forward_steps + board.en_passant_move(position)
side_attacks
forward_steps
board.en_passant_move(position)
self.position
c
self.position
c
self.position
c
self.position
c
self.position
c
self.position
c
self.position
c
self.position
c
self.position
c
self.position
self
board.en_passant_move(position)
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
cc
c
board.en_passant_move(position)
c
board.en_passant_move(position)
c
cc
c
cc
c
cc
c
C
c
n
valid_squares
