q
g.board[5,5].moves
g.board[5,5].side_attacks
g.board[5,5]
g.display.render
q
g.play
g.plat
g.checkmate?
g.display.render
q
g.checkmate?
g.board.any_pieces_attacking?([6,5], :black)
q
g.display.render
q
piece.moves
position
piece
n
s
n
s
n
s
n
s
n
s
n
piece
s
display piece
piece
s
list=
piece
n
display row
s
n
s
q
n
display row
s
n
s
q
n
display row
n
color
position
s
q
g.board.any_pieces_attacking?([6,5], :black)
g.board[7,6].valid_moves
g.board[7,6]
g.display.render
g.checkmate?
q
g.board[7,6].valid_moves
g.board[7,6].position
g.board[7,6].color
g.board[7,6]
g.board[7,6].
g.board[7,4].moves
g.board[7,6].moves
g.board[7,6].valid_moves
g.board[7,6]
g.display.render
g.play
g.checkmate?
g.display.render
q
g.display.render
g.checkmate?
q
g.display.render
q
g.play
g.display.render
q
g.display.render
q
g.display.render
q
g.play
g.display.render
q
g.draw?
q
g.play
g.draw?
q
g.draw?
q
g.display.render
q
g.display.render
q
g.play
q
g.display.render
q
g.checkmate?
q
g.display.render
q
g.display.render
g.checkmate?
q
g.current_player
current_player
g.player2
g.player1
q
list=
g
g.player1
current_player.color
s
list=
g.checkmate?
g.display.render
q
g.play
g.display.render
q
g.checkmate?
list=
g.display.render
q
g.board.king_in_adjacent_square?([5,3], :black)
g.board.king_in_adjacent_square?([5,4], :black)
g.board.king_in_adjacent_square?([6,6], :black)
g.display.render
q
color
position
n
s
square
n
s
square
n
color
position
n
s
square
s
n
s
n
s
n
s
n
s
n
display row
n
s
n
s
q
n
s
n
move_dirs
s
moves
move_into_check?([6,6])
s
n
s
n
display row
s
n
mn
n
s
q
g.checkmate?
q
g.checkmate?
q
g.checkmate?
q
n
s
n
s
n
s
n
display row
s
n
s
q
valid_squares
n
s
display square
n
s
n
s
n
display row
s
n
s
q
valid_squares
n
moves
n
s
n
s
n
display row
s
n
s
q
valid_squares
n
moves
move_into_check?([6,6])
move_into_check?([5,6])
n
s
n
s
n
display row
s
n
s
q
legal_moves
n
s
list=
board.any_pieces_attacking?([6,6], opponent_color)
board.any_pieces_attacking?([7,6], opponent_color)
opponent_color
move_dirs
self
